// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/kafka/producer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sarama "github.com/Shopify/sarama"
	gomock "github.com/golang/mock/gomock"
)

// MockAsyncProducer is a mock of AsyncProducer interface.
type MockAsyncProducer struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncProducerMockRecorder
}

// MockAsyncProducerMockRecorder is the mock recorder for MockAsyncProducer.
type MockAsyncProducerMockRecorder struct {
	mock *MockAsyncProducer
}

// NewMockAsyncProducer creates a new mock instance.
func NewMockAsyncProducer(ctrl *gomock.Controller) *MockAsyncProducer {
	mock := &MockAsyncProducer{ctrl: ctrl}
	mock.recorder = &MockAsyncProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncProducer) EXPECT() *MockAsyncProducerMockRecorder {
	return m.recorder
}

// SendMessageWithContext mocks base method.
func (m *MockAsyncProducer) SendMessageWithContext(ctx context.Context, msg *sarama.ProducerMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessageWithContext", ctx, msg)
}

// SendMessageWithContext indicates an expected call of SendMessageWithContext.
func (mr *MockAsyncProducerMockRecorder) SendMessageWithContext(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageWithContext", reflect.TypeOf((*MockAsyncProducer)(nil).SendMessageWithContext), ctx, msg)
}
